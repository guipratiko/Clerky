<!-- Container principal -->
<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav id="sidebar" class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
      <div class="position-sticky pt-3">
        <div class="text-center mb-4 sidebar-logo">
          <img src="/img/logo.png" alt="WhatsVX Logo" class="img-fluid">
          <p class="text-muted">Sistema de Mensagens</p>
        </div>
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link" href="/">
              <i class="bi bi-speedometer2 me-2"></i>
              Dashboard
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <!-- Conteúdo Principal -->
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="row">
        <!-- Card de Status da IA -->
        <div class="col-md-12 mb-4">
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="card-title mb-0"><i class="bi bi-robot"></i> Integração com IA</h5>
              <div>
                <button id="toggle-webhook" class="btn btn-sm btn-outline-secondary me-2" data-is-test="true">
                  <i class="bi bi-arrow-left-right"></i> <span>Webhook: Teste</span>
                </button>
                <button id="test-ia" class="btn btn-sm btn-outline-info me-2">
                  <i class="bi bi-bug"></i> Testar Webhook
                </button>
                <button id="toggle-ia" class="btn btn-sm btn-outline-primary" data-ativo="false">
                  <i class="bi bi-power"></i> Ativar IA
                </button>
              </div>
            </div>
            <div class="card-body">
              <div id="ia-status">
                <div class="alert alert-warning">
                  <i class="bi bi-robot"></i>
                  <strong>IA:</strong> Inativa
                  <small class="d-block">A integração com IA está desativada</small>
                </div>
              </div>
              <div class="mt-3">
                <h6>Configurações da IA</h6>
                <p class="text-muted">
                  <i class="bi bi-info-circle"></i> 
                  Quando ativada, a IA responderá automaticamente às mensagens recebidas.
                  As respostas são geradas pelo n8n usando GPT-3.5-turbo.
                </p>
                
                <div class="mt-4">
                  <h6>URLs do Webhook</h6>
                  <form id="webhook-urls-form">
                    <div class="mb-3">
                      <label for="test-url" class="form-label">URL de Teste</label>
                      <input type="url" class="form-control" id="test-url" name="testUrl" 
                             placeholder="https://guipratiko.app.n8n.cloud/webhook-test/28e86e9d-faba-4eff-94b8-d9d710acfe79">
                    </div>
                    <div class="mb-3">
                      <label for="prod-url" class="form-label">URL de Produção</label>
                      <input type="url" class="form-control" id="prod-url" name="prodUrl" 
                             placeholder="https://guipratiko.app.n8n.cloud/webhook/28e86e9d-faba-4eff-94b8-d9d710acfe79">
                    </div>
                    <button type="submit" class="btn btn-primary">
                      <i class="bi bi-save"></i> Salvar URLs
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="col-md-7">
          <div class="card mb-4">
            <div class="card-header">
              <h5 class="card-title mb-0"><i class="bi bi-whatsapp"></i> Status da Conexão</h5>
            </div>
            <div class="card-body">
              <div id="connection-status">
                <div class="d-flex align-items-center">
                  <div class="spinner-border text-primary me-3" role="status">
                    <span class="visually-hidden">Carregando...</span>
                  </div>
                  <p class="mb-0">Verificando status de conexão...</p>
                </div>
              </div>
              
              <div class="mt-4">
                <h6>Ações de Conexão</h6>
                <div class="d-flex gap-2">
                  <form action="/api/whatsapp/desconectar" method="POST" id="disconnect-form">
                    <button type="submit" class="btn btn-danger" id="disconnect-btn" disabled>
                      <i class="bi bi-power"></i> Desconectar
                    </button>
                  </form>
                  <button type="button" class="btn btn-primary" id="refresh-qr-btn" disabled>
                    <i class="bi bi-arrow-repeat"></i> Atualizar QR Code
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card">
            <div class="card-header">
              <h5 class="card-title mb-0"><i class="bi bi-info-circle"></i> Instruções</h5>
            </div>
            <div class="card-body">
              <ol>
                <li>
                  <strong>Conecte-se ao WhatsApp</strong>
                  <p>Quando o QR code aparecer, escaneie-o usando o aplicativo do WhatsApp no seu telefone. Siga estes passos:</p>
                  <ul>
                    <li>Abra o WhatsApp no seu telefone</li>
                    <li>Toque nos três pontos (⋮) e selecione "WhatsApp Web"</li>
                    <li>Aponte a câmera para o QR code exibido nesta página</li>
                  </ul>
                </li>
                <li>
                  <strong>Mantenha a Conexão Ativa</strong>
                  <p>Para manter a conexão ativa:</p>
                  <ul>
                    <li>Mantenha seu telefone conectado à internet</li>
                    <li>Evite desconectar o WhatsApp Web de seu telefone</li>
                    <li>Mantenha esta aplicação rodando</li>
                  </ul>
                </li>
                <li>
                  <strong>Comece a Enviar Mensagens</strong>
                  <p>Após conectar, você pode:</p>
                  <ul>
                    <li>Criar templates de mensagens</li>
                    <li>Criar campanhas com listas de contatos</li>
                    <li>Iniciar o processamento das campanhas</li>
                  </ul>
                </li>
              </ol>
              
              <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle"></i> <strong>Aviso:</strong> Use este sistema responsavelmente e em conformidade com os termos de serviço do WhatsApp. Envios em massa não solicitados podem resultar no bloqueio de sua conta.
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-5">
          <div class="card mb-4">
            <div class="card-header">
              <h5 class="card-title mb-0"><i class="bi bi-qr-code"></i> QR Code</h5>
            </div>
            <div class="card-body text-center">
              <div id="qrcode-container">
                <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 300px;">
                  <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Carregando...</span>
                  </div>
                  <p class="mb-0">Aguardando QR Code...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

<!-- Rodapé -->
<footer class="py-3 bg-light">
  <div class="container text-center">
    <p class="mb-0">&copy; <%= new Date().getFullYear() %> WhatsVX - Sistema de Mensagens</p>
  </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const socket = io();
    const connectionStatusEl = document.getElementById('connection-status');
    const qrcodeContainerEl = document.getElementById('qrcode-container');
    const disconnectBtn = document.getElementById('disconnect-btn');
    const refreshQrBtn = document.getElementById('refresh-qr-btn');
    const toggleWebhookBtn = document.getElementById('toggle-webhook');
    
    // Função para verificar status
    function checkStatus() {
      fetch('/api/whatsapp/status')
        .then(response => response.json())
        .then(data => {
          updateStatusUI(data.state);
          
          if (data.state === 'qr' && data.hasQR) {
            loadQRCode();
          } else if (data.state !== 'qr') {
            // Se não está no estado QR, limpar QR code
            if (data.state === 'connected') {
              qrcodeContainerEl.innerHTML = `
                <div class="alert alert-success text-center" style="min-height: 300px; display: flex; flex-direction: column; justify-content: center;">
                  <i class="bi bi-check-circle-fill" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                  <h5>WhatsApp Conectado</h5>
                  <p>Você já está conectado e pode começar a enviar mensagens.</p>
                </div>
              `;
            } else if (data.state === 'disconnected') {
              qrcodeContainerEl.innerHTML = `
                <div class="alert alert-secondary text-center" style="min-height: 300px; display: flex; flex-direction: column; justify-content: center;">
                  <i class="bi bi-phone" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                  <h5>Desconectado</h5>
                  <p>O WhatsApp não está conectado. Aguarde o QR code para conectar.</p>
                </div>
              `;
            }
          }
        })
        .catch(error => {
          console.error('Erro ao verificar status:', error);
          connectionStatusEl.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill"></i> Erro ao verificar status de conexão
            </div>
          `;
        });
    }
    
    // Função para carregar QR Code
    function loadQRCode() {
      fetch('/api/whatsapp/qrcode')
        .then(response => response.json())
        .then(data => {
          if (data.qrcode) {
            qrcodeContainerEl.innerHTML = `
              <img src="${data.qrcode}" alt="QR Code" class="img-fluid mb-3">
              <p class="text-muted">Escaneie este QR Code com seu WhatsApp</p>
            `;
          } else {
            qrcodeContainerEl.innerHTML = `
              <div class="alert alert-warning text-center" style="min-height: 300px; display: flex; flex-direction: column; justify-content: center;">
                <i class="bi bi-exclamation-triangle-fill" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                <h5>QR Code não disponível</h5>
                <p>Aguarde alguns instantes ou recarregue a página.</p>
              </div>
            `;
          }
        })
        .catch(error => {
          console.error('Erro ao carregar QR Code:', error);
          qrcodeContainerEl.innerHTML = `
            <div class="alert alert-danger text-center" style="min-height: 300px; display: flex; flex-direction: column; justify-content: center;">
              <i class="bi bi-exclamation-triangle-fill" style="font-size: 4rem; margin-bottom: 1rem;"></i>
              <h5>Erro ao carregar QR Code</h5>
              <p>${error.message || 'Tente novamente mais tarde'}</p>
            </div>
          `;
        });
    }
    
    // Função para atualizar UI baseado no status
    function updateStatusUI(state) {
      let statusHtml = '';
      
      // Atualizar botões
      disconnectBtn.disabled = state === 'disconnected';
      refreshQrBtn.disabled = state !== 'qr';
      
      // Atualizar status
      if (state === 'connected') {
        statusHtml = `
          <div class="alert alert-success">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="bi bi-check-circle-fill" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h5 class="mb-1">WhatsApp Conectado</h5>
                <p class="mb-0">Você pode enviar mensagens agora.</p>
              </div>
            </div>
          </div>
        `;
      } else if (state === 'disconnected') {
        statusHtml = `
          <div class="alert alert-danger">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="bi bi-x-circle-fill" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h5 class="mb-1">WhatsApp Desconectado</h5>
                <p class="mb-0">Escaneie o QR Code para conectar.</p>
              </div>
            </div>
          </div>
        `;
      } else if (state === 'qr') {
        statusHtml = `
          <div class="alert alert-warning">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="bi bi-qr-code" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h5 class="mb-1">Aguardando Escaneamento</h5>
                <p class="mb-0">Escaneie o QR Code com seu aplicativo WhatsApp.</p>
              </div>
            </div>
          </div>
        `;
      } else if (state === 'authenticated') {
        statusHtml = `
          <div class="alert alert-info">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="bi bi-shield-check" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h5 class="mb-1">Autenticado</h5>
                <p class="mb-0">WhatsApp autenticado, inicializando conexão...</p>
              </div>
            </div>
          </div>
        `;
      } else {
        statusHtml = `
          <div class="alert alert-secondary">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="bi bi-question-circle-fill" style="font-size: 2rem;"></i>
              </div>
              <div>
                <h5 class="mb-1">Status: ${state}</h5>
                <p class="mb-0">Estado de conexão desconhecido.</p>
              </div>
            </div>
          </div>
        `;
      }
      
      connectionStatusEl.innerHTML = statusHtml;
    }
    
    // Verificar status inicial
    checkStatus();
    
    // Configurar listeners para botões
    refreshQrBtn.addEventListener('click', function() {
      location.reload();
    });
    
    // Socket.IO para atualizações em tempo real
    socket.on('whatsapp:status', function(data) {
      updateStatusUI(data.status);
      
      if (data.status === 'connected') {
        qrcodeContainerEl.innerHTML = `
          <div class="alert alert-success text-center" style="min-height: 300px; display: flex; flex-direction: column; justify-content: center;">
            <i class="bi bi-check-circle-fill" style="font-size: 4rem; margin-bottom: 1rem;"></i>
            <h5>WhatsApp Conectado</h5>
            <p>Você já está conectado e pode começar a enviar mensagens.</p>
          </div>
        `;
      }
    });
    
    socket.on('whatsapp:qr', function(data) {
      if (data.url) {
        qrcodeContainerEl.innerHTML = `
          <img src="${data.url}" alt="QR Code" class="img-fluid mb-3">
          <p class="text-muted">Escaneie este QR Code com seu WhatsApp</p>
        `;
      }
    });

    // Função para atualizar o estado do botão de webhook
    async function updateWebhookButton() {
      try {
        const response = await fetch('/api/whatsapp/webhook/url');
        const data = await response.json();
        toggleWebhookBtn.dataset.isTest = data.isTest;
        toggleWebhookBtn.querySelector('span').textContent = `Webhook: ${data.isTest ? 'Teste' : 'Produção'}`;
        toggleWebhookBtn.classList.toggle('btn-outline-secondary', data.isTest);
        toggleWebhookBtn.classList.toggle('btn-outline-success', !data.isTest);
      } catch (error) {
        console.error('Erro ao atualizar estado do webhook:', error);
      }
    }

    // Evento para alternar o webhook
    toggleWebhookBtn.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/whatsapp/webhook/toggle', {
          method: 'POST'
        });
        const data = await response.json();
        if (data.success) {
          await updateWebhookButton();
          // Mostrar mensagem de sucesso
          const alert = document.createElement('div');
          alert.className = 'alert alert-success alert-dismissible fade show mt-3';
          alert.innerHTML = `
            ${data.message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          `;
          document.querySelector('#ia-status').appendChild(alert);
          // Remover o alerta após 5 segundos
          setTimeout(() => alert.remove(), 5000);
        }
      } catch (error) {
        console.error('Erro ao alternar webhook:', error);
      }
    });

    // Atualizar o estado do botão ao carregar a página
    updateWebhookButton();

    // Carregar URLs do webhook
    async function loadWebhookUrls() {
      try {
        const response = await fetch('/api/whatsapp/webhook-urls');
        const data = await response.json();
        document.getElementById('test-url').value = data.test;
        document.getElementById('prod-url').value = data.prod;
      } catch (error) {
        console.error('Erro ao carregar URLs do webhook:', error);
      }
    }

    // Salvar URLs do webhook
    document.getElementById('webhook-urls-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const testUrl = document.getElementById('test-url').value;
      const prodUrl = document.getElementById('prod-url').value;

      try {
        const response = await fetch('/api/whatsapp/webhook-urls', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ testUrl, prodUrl })
        });

        const data = await response.json();
        if (response.ok) {
          alert('URLs do webhook atualizadas com sucesso!');
        } else {
          alert('Erro ao salvar URLs do webhook: ' + data.error);
        }
      } catch (error) {
        console.error('Erro ao salvar URLs do webhook:', error);
        alert('Erro ao salvar URLs do webhook');
      }
    });

    // Carregar URLs ao iniciar
    document.addEventListener('DOMContentLoaded', () => {
      loadWebhookUrls();
    });
  });
</script> 